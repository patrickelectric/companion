{% include ../_includes/header.liquid %}

<script src="network.min.js"></script>
<script>

var settings = {
	endpoint: '/test', // Where to GET/POST
	delay: 5000,
	
	data: {
		// The amount of data to initially use. 
		size: 100 * 1024 * 1024, // 100 MB 
		// If the measure period can't reach the delay defined in the settings, 
		// the data amount is multiplied by the following value. 
		multiplier: 2
	},
	
	latency: {
		measures: 50
	}
};

var net = new Network(settings);

// Listen for the "end" event which provides the calculated latencies. 
net.latency.on('end', function(averageLatency, allLatencies) {
	console.log('end', averageLatency, allLatencies);
	document.getElementById("latency results").innerHTML = averageLatency.toFixed(3) + ' ms';
});

net.upload
	.on('start', function(dataSize) {
		console.log('start', dataSize);
	})
	.on('progress', function(averageSpeed, instantSpeed) {
		// Every bandwidth measurement is in BYTES per second! 
		document.getElementById("upload results").innerHTML = formatMbps(averageSpeed);
	})
	.on('restart', function(dataSize) {
		// The restart event is triggered when the module didn't have time 
		// (according to the `delay` option) to take all the measures. A new 
		// request will start with data size increased by the multiplier value. 
		console.log('restart', dataSize);
	})
	.on('end', function(averageSpeed, allInstantSpeeds) {
		console.log('end', averageSpeed, allInstantSpeeds);
		document.getElementById("upload results").innerHTML = formatMbps(averageSpeed);
	});

net.download
	.on('start', function(dataSize) {
		console.log('start', dataSize);
	})
	.on('progress', function(averageSpeed, instantSpeed) {
		document.getElementById("download results").innerHTML = formatMbps(averageSpeed);
	})
	.on('restart', function(dataSize) {
		console.log('restart', dataSize);
	})
	.on('end', function(averageSpeed, allInstantSpeeds) {
		console.log('end', averageSpeed, allInstantSpeeds);
		document.getElementById("download results").innerHTML = formatMbps(averageSpeed);
	});

// Set up socket
var socket = io();

// Listen to RAM and CPU usage stats
socket.on('cpu stats', function(data) {
	// make cpu load display with one decimal point if less than 10.
	var _cpu_load;
	if (Math.abs(data.cpu_load) < 10) {
		_cpu_load = data.cpu_load.toFixed(1);
	} else {
		_cpu_load = data.cpu_load.toFixed(0);
	}

	// display data
	document.getElementById('cpuLoad').innerHTML = _cpu_load + '%';
	document.getElementById('ramFree').innerHTML = data.ram_free.toFixed(3) + ' MB';
	document.getElementById('ramUsed').innerHTML = data.ram_used.toFixed(3) + ' MB';
	document.getElementById('ramTotal').innerHTML = data.ram_total.toFixed(3) + ' MB';
	document.getElementById('cpuStatus').innerHTML = data.cpu_status;
});

// Convert Bytes per second to Megabits per second
function formatMbps(Bps) {
	var Mbps = Bps * 8 * 0.000001;
	var formatted = Mbps.toFixed(3) + ' Mbps';
	return formatted;
}
	
function testLatency() {
	// Once all the configuration is done, start the requests for this module. 
	net.latency.start();
}

function testUpload() {
	net.upload.start();
}

function testDownload() {
	net.download.start();
}

function isValidIP(ip) {
	return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(ip);
}

function validateIp(elementId) {
	var ip = document.getElementById(elementId).value;
	if (!isValidIP(ip)) {
		document.getElementById(elementId).setAttribute("style", "width: 300px; border:2px solid #ff0000")
		return false
	}
	document.getElementById(elementId).setAttribute("style", "width: 300px; border:2px solid #00ff00")
	return ip
}

function setCompanionDefaultClientIP() {
	var ip = validateIp('client ip')
	if (!ip) {
		return
	}
	socket.emit('set default ip', ip);
}

</script>

<!-- Companion Computer Status -->
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Companion Computer Status
				</h3>
			</div>
			<div class="panel-body">
				<dl class="dl-horizontal">
					<dt>CPU Load: </dt>
						<dd id="cpuLoad"></dd>
					<dt>Free RAM: </dt>
						<dd id="ramFree"></dd>
					<dt>Used RAM: </dt>
						<dd id="ramUsed"></dd>
					<dt>Total RAM: </dt>
						<dd id="ramTotal"></dd>
					<dt>CPU Status: </dt>
						<dd id="cpuStatus"></dd>
				</dl>
			</div>
		</div>
	</div>
</div>

<!-- Companion Computer IP Configuration -->
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Companion Computer IP Configuration
				</h3>
			</div>
			<div class="panel-body">
				<dl class="dl-horizontal">
					<div class="form-group">
						<h3>IP Address:</h3>
						<input type="text" class="form-control" id="client ip" value="192.168.2.2" style="width: 300px;"></input>
					</div>
					<button type="button" class="btn btn-primary"
						id="ethernet ip" onclick="setCompanionDefaultClientIP()">
						Change Companion Default Client IP</button>
				</dl>
			</div>
		</div>
	</div>
</div>

<div id="content">
	<div class="row">
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">
						Bandwidth and Latency Testing
					</h3>
				</div>
				
				<div class="panel-body">
					<h1>Test Network</h1>
					<input type="submit" class="btn btn-primary" value="latency" onClick="testLatency()"/>
					<input type="submit" class="btn btn-primary" value="upload" onClick="testUpload()"/>
					<input type="submit" class="btn btn-primary" value="download" onClick="testDownload()"/>
					<div>
						<h2>Latency Results:</h2>
						<h3 id="latency results"></h6>
					</div>
					<div>
						<h2>Upload Results:</h2>
						<h3 id="upload results"></h6>
					</div>
					<div>
						<h2>Download Results:</h2>
						<h3 id="download results"></h6>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

{% include ../_includes/footer.liquid %}
