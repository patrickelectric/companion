{% include ../_includes/header.liquid %}

<script src="/js/network.js"></script>
<script>

// WiFi Setup
var networking = io('/networking');

networking.on('wifi aps', function(data) {

	console.log('got wifi aps')
	var select = document.getElementById("ssid");
	
	if (select.options[select.selectedIndex]) {
		var currentSSID = select.options[select.selectedIndex].text;
		console.log('current SSID:' + currentSSID);
	}
	
	while (select.hasChildNodes()) {
		select.removeChild(select.lastChild);
	}
	
	var index = 0;
	var newIndex = 0;
	
	data.forEach(function(line) {
		var option = document.createElement('option');
		option.value = line;
		option.innerHTML = line;
		if (currentSSID && line == currentSSID) {
			newIndex = index;
			console.log('match! new index:' + index);
		}
		select.appendChild(option);
		index++;
		console.log(index);
	});
	
	select.selectedIndex = newIndex;
});

socket.on('internet status', function(data) {
	console.log('got internet status')
	console.log(data);
	var statusIndicator = document.getElementById("internet-status");
	if (data == true) {
		statusIndicator.innerHTML = '<h4 style="color:green;">Connected</h1>';
	} else {
		statusIndicator.innerHTML = '<h4 style="color:red;">Not Connected</h1>';
	}
});

networking.on('wifi status', function(data) {
	console.log('got wifi status')
	console.log(data);
	var statusIndicator = document.getElementById("wifi-status");
	statusIndicator.innerHTML = data;
});

networking.on('join complete', function(data) {
	disableButton(false);
});

function joinNetwork() {
	disableButton(true);
	var select = document.getElementById("ssid");
	var ssid = select.options[select.selectedIndex].text;
	networking.emit('join network', {
		"ssid" : ssid,
		"password" : document.getElementById('password').value
	});
};

function disableButton(disabled) {
	document.getElementById('joinButton').disabled = disabled;
	document.getElementById('spinner').style.visibility = disabled ? "visible" : "hidden";
}

networking.emit('get wifi status');
networking.emit('get wifi aps');

setInterval(function() {
	networking.emit('get wifi status');
}, 3000);

setInterval(function() {
	networking.emit('get wifi aps');
}, 6000);

// \WiFi Setup

// Bandwidth testing

var settings = {
	endpoint: '/test', // Where to GET/POST
	delay: 5000,
	
	data: {
		// The amount of data to initially use. 
		size: 100 * 1024 * 1024, // 100 MB 
		// If the measure period can't reach the delay defined in the settings, 
		// the data amount is multiplied by the following value. 
		multiplier: 2
	},
	
	latency: {
		measures: 50
	}
};

var net = new Network(settings);

// Listen for the "end" event which provides the calculated latencies. 
net.latency
	.on('end', function(averageLatency, allLatencies) {
	console.log('end', averageLatency, allLatencies);
	document.getElementById("latency results").innerHTML = averageLatency.toFixed(3) + ' ms';
});

net.upload
	.on('start', function(dataSize) {
		console.log('start', dataSize);
	})
	.on('progress', function(averageSpeed, instantSpeed) {
		// Every bandwidth measurement is in BYTES per second! 
		document.getElementById("upload results").innerHTML = formatMbps(averageSpeed);
	})
	.on('restart', function(dataSize) {
		// The restart event is triggered when the module didn't have time 
		// (according to the `delay` option) to take all the measures. A new 
		// request will start with data size increased by the multiplier value. 
		console.log('restart', dataSize);
	})
	.on('end', function(averageSpeed, allInstantSpeeds) {
		console.log('end', averageSpeed, allInstantSpeeds);
		document.getElementById("upload results").innerHTML = formatMbps(averageSpeed);
	});

net.download
	.on('start', function(dataSize) {
		console.log('start', dataSize);
	})
	.on('progress', function(averageSpeed, instantSpeed) {
		document.getElementById("download results").innerHTML = formatMbps(averageSpeed);
	})
	.on('restart', function(dataSize) {
		console.log('restart', dataSize);
	})
	.on('end', function(averageSpeed, allInstantSpeeds) {
		console.log('end', averageSpeed, allInstantSpeeds);
		document.getElementById("download results").innerHTML = formatMbps(averageSpeed);
	});
	
// Convert Bytes per second to Megabits per second
function formatMbps(Bps) {
	var Mbps = Bps * 8 * 0.000001;
	var formatted = Mbps.toFixed(3) + ' Mbps';
	return formatted;
}
	
function testLatency() {
	// Once all the configuration is done, start the requests for this module. 
	net.latency.start();
}

function testUpload() {
	net.upload.start();
}

function testDownload() {
	net.download.start();
}
	
// \Bandwidth testing

// Set up socket
var socket = io();

function isValidIP(ip) {
	return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(ip);
}

// Method to change the default ip of companion only when it is in manual mode.
function setCompanionEthernetIP() {
	var modeValue = document.getElementById("current-config").innerText;
	var mode = modeValue.trim();
	console.log(mode);
	if (mode === "Manual") {
		var ip_addr = prompt("Please enter a new IP Address");

		var valid_ip = isValidIP(ip_addr);
		if (!valid_ip) {
			alert("Invalid IP address: " + ip_addr);
			return;
		}
	
		if (confirm("Are you sure you want to change the ethernet IP to " + ip_addr + "?")) {
			socket.emit("set default ip", ip_addr);
		}
		alert("New IP will take affect after reboot");
	} else {
		alert("Changing IP address is only allowed in manual mode");
	}
}

// Get the current network configuration
socket.on("current network config", function(data) {
	var currentConf = data.trim()
	var configuration = currentConf.fontcolor("green");
	document.getElementById("current-config").innerHTML=configuration;
	if (currentConf === "Manual") {
		document.getElementById("manual").checked=true;
		console.log("got current configuration");
	} else if(currentConf === "DHCP Server") {
		console.log("current configuration is dhcp server");
		document.getElementById("server").checked=true;
		console.log("got current configuration");
	} else if(currentConf === "DHCP Client") {
		document.getElementById("client").checked=true;
		console.log("got current configuration");
	} else {
		console.log("configuration data not recieved");
	}
});

// Set companion network configuration according to the option selected by user
function setCompanionMode() {
	if (document.getElementById("manual").checked) {
		if (confirm("Are you sure you want to configure the Companion Ethernet interface in Manual mode? The system " +
		"will automatically reboot for reconfiguration. The static IP address will be 192.168.2.2 after reboot. " +
		"CLICKING OK MAY RENDER THE SYSTEM UNUSABLE. IF YOU ARE NOT SURE OF WHAT YOU ARE DOING, CLICK CANCEL!")) {
			socket.emit("configure-network", "Manual");
			alert("The Companion Ethernet interface has been configured in Manual mode. The Companion computer will " +
			"restart in a few seconds. Do not interrupt the configuration process and make sure the Companion " +
			"computer remains plugged in to a power supply. The static IP address will be 192.168.2.2 after reboot.");
		}
	} else if (document.getElementById("server").checked) {
		if (confirm("Are you sure you want to configure the Companion Ethernet interface as a DHCP server? The " +
		"system will automatically reboot for reconfiguration. CLICKING OK MAY RENDER THE SYSTEM UNUSABLE. IF " +
		"YOU ARE NOT SURE OF WHAT YOU ARE DOING, CLICK CANCEL!")) {
			socket.emit("configure-network", "Server");
			alert("Companion has been configured as DHCP server. The Companion computer will restart in a few " +
			"seconds. Do not interrupt the configuration process and make sure the Companion computer remains " +
			"plugged in to a power supply.");
		}
	} else if (document.getElementById("client").checked) {
		if (confirm("Are you sure you want to configure the Companion Ethernet interface as a DHCP client? The " +
		"system will automatically reboot for reconfiguration. CLICKING OK MAY RENDER THE SYSTEM UNUSABLE. IF YOU " +
		"ARE NOT SURE OF WHAT YOU ARE DOING, CLICK CANCEL!")) {
			socket.emit("configure-network", "Client");
			alert("Companion has been configured as DHCP client. The Companion computer will restart in a few " +
			"seconds. Do not interrupt the configuration process and make sure the Companion computer remains " +
			"plugged in to a power supply. Log into the DHCP server (usually router) to find the IP address of " +
			"the Companion computer.");
		}
	}
}

socket.emit('get current ip');
socket.emit("get-network-configuration");

socket.on('current ip', function(data) {
	console.log("got ethernet ip:", data);
	$("#ethernet-ip").html("Current IP: " + data);
});

</script>

<h1>Network Setup</h1>
<!-- Wifi Setup -->
<div class="row">
	<div class="col-md-6">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">Wifi Setup</h3>
			</div>
			<div class="panel-body">
				<form onsubmit="joinNetwork(); return false">
					<h3>Wifi SSID:</h3>
					<select class="form-control" id="ssid" style="width: 200px;"></select>
					<h3>Password:</h3>
					<div class="form-group">
						<input class="form-control" id="password" type="password" style="width: 200px;" />
						<button id="joinButton" type="submit" class="btn btn-primary">Join Network</button>
						<i id="spinner" class="fa fa-refresh fa-spin fa-2x fa-fw" style="visibility:hidden"></i>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">Wifi Status</h3>
			</div>
			<div class="panel-body">
				<h3>Wifi Status:</h3>
				<h4><span id="wifi-status">Pending</span></h4>
				<h3>Internet Status:</h3>
				<h4><span id="internet-status">Pending</span></h4>
			</div>
		</div>
	</div>
</div>

<!-- Ethernet Setup -->
<div class="row companion-advanced" style="display:none">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Ethernet Configuration
				</h3>
			</div>
			<div class="panel-body">
				<h4 id="ethernet-ip">Current IP:</h4>
				<dl class="dl-horizontal">
					<button type="button" class="btn btn-primary"
						id="eth0 ip button" onclick="setCompanionEthernetIP()">
						Change Companion Default Ethernet IP</button>
				</dl>
				<dl class="dl-horizontal">
					<h3> Current Configuration: <span id="current-config"></span></h3>
					<h3 id="configure"> Companion Network Settings: </h3>
					<h4><input type="radio" name="config" id="manual"/> Manual (default)</h4>
					<b>&emsp;&emsp;The IP address is manually assigned to the Ethernet interface. This is known as a 
					"static IP address" because the IP address will not change on it's own. The default IP address 
					for Companion is 192.168.2.2</b>
					<h4><input type="radio" name="config" id="server"/> DHCP Server</h4>
					<b>&emsp;&emsp;DHCP Server mode is useful for connecting the ROV to many computers without
					reconfiguring each computer’s network options. In this mode, the Companion computer will have a
					static IP address of 192.168.2.2.</b>
					<h4><input type="radio" name="config" id="client"/> DHCP Client</h4>
					<b>&emsp;&emsp;DHCP Client mode is useful for connecting the ROV to a network through a router. 
					The Companion computer will need to be connected to a DHCP server (like a router) on the network 
					to be assigned an IP address. Log into your router to find/configure the IP address that is 
					assigned to the Companion computer.</b>
					<br></br>
					<button type="button" class="btn btn-primary"
						id="configure button" onclick="setCompanionMode()">
						Configure </button>
				</dl>
			</div>
		</div>
	</div>
</div>

<div id="content">
	<div class="row">
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">
						Bandwidth and Latency Testing
					</h3>
				</div>
				
				<div class="panel-body">
					<h1>Test Network</h1>
					<!-- <input type="submit" class="btn btn-primary" value="latency" onClick="testLatency()"/> -->
					<input type="submit" class="btn btn-primary" value="upload" onClick="testUpload()"/>
					<input type="submit" class="btn btn-primary" value="download" onClick="testDownload()"/>
				<!--
					<div>
						<h2>Latency Results:</h2>
						<h3 id="latency results"></h6>
					</div>
				-->
					<div>
						<h2>Upload Results:</h2>
						<h3 id="upload results"></h6>
					</div>
					<div>
						<h2>Download Results:</h2>
						<h3 id="download results"></h6>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
{% include ../_includes/footer.liquid %}
